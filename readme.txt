Тестовое задание

Описание функционала
Выполненное задание представляет собой REST-сервис. Формат тела запросов/ответов - JSON. 
API:
1. Проверка местоположения для заданного пользователя по его заданным текущим координатам.
HTTP-метод GET
Endpoint /geo/check
HTTP-параметры 
userId - целочисленный идентификатор пользователя
lon - долгота, вещественное число
lat - широта, вещественное число
Аттрибуты ответа
result - строка, содержащая NEAR (если пользователь рядом с меткой) или AWAY (если пользователь вдали от метки)
2. Статистика по ячейке сетки
HTTP-метод GET
Endpoint /geo/statistics
HTTP-параметры
lon - долгота, вещественное число
lat - широта, вещественное число
Аттрибуты ответа
result - строка, содержащая количество пользователей, имеющие метку в данной ячейке
3. Добавление нового пользователя
HTTP-метод POST
Endpoint /geo/mark
Атрибуты запроса
userId - целочисленный идентификатор пользователя
lon - долгота, вещественное число
lat - широта, вещественное число
Тело ответа отсутствует
4. Изменение существующего пользователя
HTTP-метод PUT
Endpoint /geo/mark
Атрибуты запроса
userId - целочисленный идентификатор пользователя
lon - долгота, вещественное число
lat - широта, вещественное число
Тело ответа отсутствует
5. Удаление существующего пользователя
HTTP-метод DELETE
Endpoint /geo/mark
HTTP-параметры
userId - целочисленный идентификатор пользователя
Тело ответа отсутствует

Сборка и запуск
Сборка проекта осуществляется с помощью Maven. Для этого необходимо выполнить mvn package в директории проекта.
В результате будет собран server-1.0.jar в директории target.
Запуск сервера осуществляется командой java -jar server-1.0.jar <путь к файлу CSV с метками> <путь к файлу CSV с сеткой> из директории target.
Для генерации CSV-файлов меток и сетки следует использовать следующую команду mvn exec:java -Dstart-class="ru.szotov.geo.server.Generator" -Dexec.args="<путь к файлу CSV с метками> <путь к файлу CSV с сеткой> <количество меток пользователей>"
Сетка генерируется начиная с широты -90, долготы -180 до широты 90, долготы 180 с шагом 1 градус. Погрешность вычисляется как расстояние между координатами одной ячейки и следующей ячейки. Метки пользователей генерируются следующим образом: идентификатор пользователя начинается с 1 и увеличивается до параметра <количество меток пользователей>, широта и долгота выбирается случайным образом.

Описание реализации
Сервис реализован на основе Spring Framework (Spring IoC, Spring MVC, Bean Validation, Spring Boot). 
Данный framework позволяет быстро построить REST-сервис с использованием Dependency Injection. Добавления уровня абстракции Spring приводит к необходимости загружать дополнительные библиотеки, что увеличивает размер дистрибутива. 
DI позволяет уменьшить связность компонентов, а также упростить тестирование.
В качестве хранилища меток был выбран ConcurrentHashMap, обеспечивающий быстрый конкурентный доступ при многопоточном доступе.
Для хранилища сетки был выбран потоконебезопасный HashMap, т.к. не предусмотрено изменение сетки во время работы приложения (сетка сохраняется только при инициализации сервиса).
Объекты для доступа к коллекциям меток и сетки представляет собой паттерны Singleton и Data Access Object. Такое сочетание позволило упростить разработку, но увеличило связность, т.к. объединены хранилище данных и доступ к нему. При усложнении схемы хранения следует разнести логику по разным классам. Возможно также добавление БД в качестве хранилища.
Unit-тестирование реализовано на основе TestNG framework. В данном проекте также возможно использование JUnit без существенных изменений.

Текущие недостатки
Нет единой обработки ошибок. Один из вариантов решения - добавить обработку ошибок на уровне REST с преобразованием к ErrorMessage.
Отсутствуют интеграционные тесты.
Отсутсвует начальная конфигурация HashMap и ConcurrentHashMap.

Оценка асимптотической временной сложности
1. Проверка местоположения для заданного пользователя. 
Основной частью метода является поиск в хеш-таблицах меток пользователей и гео-точек.
Ο(1) - для случая отсутствия коллизий в хеш-таблицах;
Ο(n+m) - в худшем случае, когда hashCode для всех значений в хранилищах меток и гео-точек одинаковый (в каждом из хранилищей). n и m - количество меток и гео-точек.
2. Статистика по ячейке сетки. 
Основной частью метода является поиск в хеш-таблице гео-точек и проверка для каждой метки принадлежность ячейке.
Ο(n) - для случая отсутствия коллизий в хеш-таблице гео-точек. n - количество меток;
Ο(n+m) - в худшем случае, когда hashCode для всех значений в хранилище гео-точек одинаковый. n и m - количество меток и гео-точек.
3-5. Управление метками.
Основной частью метода является поиск в хеш-таблице меток.
Ο(1) - для случая отсутствия коллизий в хеш-таблице меток;
Ο(n) - в худшем случае, когда hashCode для всех значений в хранилище меток одинаковый. n - количество меток.
